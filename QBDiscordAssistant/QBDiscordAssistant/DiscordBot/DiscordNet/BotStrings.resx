<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPlayerSuccessful" xml:space="preserve">
    <value>Player {0} added to team '{1}'.</value>
  </data>
  <data name="AddTournamentDirectorSuccessful" xml:space="preserve">
    <value>Added tournament director to tournament '{0}' in guild '{1}'.</value>
  </data>
  <data name="AllPossibleTournamentArtifactsCleaned" xml:space="preserve">
    <value>All possible tournament artifacts cleaned up in guild '{0}'.</value>
  </data>
  <data name="AllReaderNamesShouldBeUnique" xml:space="preserve">
    <value>All reader names should be unique.</value>
  </data>
  <data name="CannotGoBack" xml:space="preserve">
    <value>Cannot go back from the stage {0}.</value>
  </data>
  <data name="CouldntGetRoleForTheOldReader" xml:space="preserve">
    <value>Couldn't get the role for the old reader. Readers were not switched. You may need to manually switch the roles.</value>
  </data>
  <data name="CreatingChannelsAndRoles" xml:space="preserve">
    <value>Creating the channels and roles...</value>
  </data>
  <data name="CurrentTournamentInGuild" xml:space="preserve">
    <value>Current tournament in guild '{0}': {1}</value>
  </data>
  <data name="ErrorAtLeastOneTeamNotInTournament" xml:space="preserve">
    <value>Error: At least one team specified is not in the tournament. Teams specified: {0}.</value>
  </data>
  <data name="ErrorFinalsOnlySetDuringPrelims" xml:space="preserve">
    <value>Error: finals can only be set during the prelims.</value>
  </data>
  <data name="ErrorGenericMessage" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="ErrorGivenUserIsntAReader" xml:space="preserve">
    <value>Error: given user isn't a reader.</value>
  </data>
  <data name="ErrorNoTeamsSpecified" xml:space="preserve">
    <value>Error: No teams specified.</value>
  </data>
  <data name="ErrorSettingCurrentTournament" xml:space="preserve">
    <value>Error setting the current tournament in guild '{0}'. {1}</value>
  </data>
  <data name="ErrorTwoTeamsMustBeSpecifiedFinals" xml:space="preserve">
    <value>Error: two teams must be specified in the finals. You have specified {0}.</value>
  </data>
  <data name="FinalsParticipantsPleaseJoin" xml:space="preserve">
    <value>Finals participants: please join the room {0} and join the voice channel for that room number.</value>
  </data>
  <data name="IsAlreadyReader" xml:space="preserve">
    <value>{0} is already a reader. The new reader must not be an existing reader.</value>
  </data>
  <data name="NotACurrentReader" xml:space="preserve">
    <value>{0} is not a current reader. You can only replace existing readers.</value>
  </data>
  <data name="PlayerIsAlreadyOnTeam" xml:space="preserve">
    <value>Player {0} is already on a team.</value>
  </data>
  <data name="PlayerIsNotOnAnyTeam" xml:space="preserve">
    <value>Player {0} is not on any team.</value>
  </data>
  <data name="PlayerRemoved" xml:space="preserve">
    <value>Player {0} removed.</value>
  </data>
  <data name="ReadersSwitchedSuccessfully" xml:space="preserve">
    <value>Readers switched successfully.</value>
  </data>
  <data name="RemovedTournamentDirector" xml:space="preserve">
    <value>Removed tournament director from tournament '{0}' in guild '{1}'.</value>
  </data>
  <data name="TeamDoesNotExist" xml:space="preserve">
    <value>Team '{0}' does not exist.</value>
  </data>
  <data name="ThisCommandCanOnlyBeUsedWhileTournamentRunning" xml:space="preserve">
    <value>This command can only be used while the tournament is running. Use !back if you are still setting up the tournament.</value>
  </data>
  <data name="TournamentCleanupFinished" xml:space="preserve">
    <value>Tournament cleanup finished in guild '{0}'.</value>
  </data>
  <data name="TournamentDoesNotExist" xml:space="preserve">
    <value>Tournament '{0}' does not exist.</value>
  </data>
  <data name="TournamentHasStarted" xml:space="preserve">
    <value>{0}: tournament has started.</value>
  </data>
  <data name="TournamentWasNotRemoved" xml:space="preserve">
    <value>Tournament was not removed from the list of pending tournaments. Try the command again.</value>
  </data>
  <data name="UnableToPerformCommand" xml:space="preserve">
    <value>Unable to perform command. {0}</value>
  </data>
  <data name="UnknownErrorRemovingOldReader" xml:space="preserve">
    <value>Unknown error when trying to remove the old reader.</value>
  </data>
  <data name="UserAlreadyTournamentDirector" xml:space="preserve">
    <value>User is already a director of '{0}' in guild '{1}'.</value>
  </data>
  <data name="UserNotTournamentDirector" xml:space="preserve">
    <value>User is not a director for tournament '{0}' in guild '{1}', or user was just removed.</value>
  </data>
</root>